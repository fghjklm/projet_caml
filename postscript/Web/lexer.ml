# 1 "lexer.mll"
 
  open Lexing
  open Parser
  open Lang
  exception Lexerror

  let pos lexbuf = (lexeme_start lexbuf, lexeme_end lexbuf)

  let advance_line_pos pos =
    { pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum; }

  let advance_line lexbuf =
    lexbuf.lex_curr_p <- advance_line_pos lexbuf.lex_curr_p
  let keyword_tabel =
    [("void", VOID_KW);
     ("int", INT_KW);
     ("float", FLOAT_KW);
     ("String", STRING_KW);
     ("return", RETURN_KW);
     ("if", IF_KW);
     ("else", ELSE_KW);
     ("for", FOR_KW);
     ("do", DO_KW);
     ("while", WHILE_KW);
     ("break", BREAK_KW);
     ("continue", CONTINUE_KW)]

let find_token s =
    match (List.assoc_opt s keyword_tabel )  with
    | Some kw -> kw
    | None -> IDENTIFIER s

# 35 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\216\255\002\000\078\000\162\000\237\000\058\001\224\255\
    \229\255\000\000\018\000\045\000\012\000\001\000\031\000\032\000\
    \033\000\035\000\244\255\245\255\246\255\247\255\248\255\249\255\
    \250\255\251\255\074\001\127\000\254\255\255\255\253\255\128\000\
    \152\001\225\255\097\000\093\000\252\255\236\255\241\255\240\255\
    \238\255\235\255\234\255\228\255\227\255\226\255\081\001\220\255\
    \024\000\041\000\219\255\061\000\055\000\070\000\218\255\138\000\
    \217\255\039\000\040\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\039\000\039\000\039\000\039\000\034\000\255\255\
    \255\255\024\000\023\000\022\000\039\000\039\000\018\000\016\000\
    \013\000\012\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\025\000\039\000\255\255\255\255\255\255\255\255\
    \032\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\033\000\255\255\
    \035\000\255\255\255\255\035\000\255\255\255\255\255\255\255\255\
    \255\255\001\000\001\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\055\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\031\000\000\000\000\000\000\000\031\000\
    \255\255\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \000\000\058\000\058\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\029\000\028\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \029\000\017\000\002\000\027\000\255\255\008\000\013\000\041\000\
    \025\000\024\000\009\000\011\000\019\000\010\000\045\000\026\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\020\000\021\000\014\000\016\000\015\000\018\000\
    \044\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\043\000\040\000\039\000\038\000\003\000\
    \037\000\003\000\003\000\003\000\003\000\003\000\004\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\005\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\023\000\012\000\022\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \042\000\030\000\030\000\035\000\036\000\049\000\050\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\052\000\053\000\054\000\056\000\047\000\000\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\000\000\000\000\000\000\
    \007\000\047\000\255\255\051\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\059\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \000\000\000\000\000\000\000\000\047\000\000\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\048\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \046\000\000\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\034\000\000\000\000\000\000\000\
    \033\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\002\000\000\000\000\000\013\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\009\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\011\000\014\000\015\000\016\000\000\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \012\000\027\000\031\000\034\000\035\000\048\000\049\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\051\000\052\000\053\000\055\000\003\000\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\255\255\255\255\255\255\
    \000\000\004\000\002\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\057\000\
    \058\000\255\255\255\255\255\255\255\255\255\255\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \255\255\255\255\255\255\255\255\005\000\255\255\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \006\000\255\255\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\026\000\255\255\255\255\255\255\
    \026\000\255\255\255\255\255\255\255\255\255\255\255\255\027\000\
    \031\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\032\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 47 "lexer.mll"
    ( token lexbuf )
# 255 "lexer.ml"

  | 1 ->
# 49 "lexer.mll"
    (advance_line lexbuf; token lexbuf )
# 260 "lexer.ml"

  | 2 ->
# 51 "lexer.mll"
    ( advance_line lexbuf; token lexbuf )
# 265 "lexer.ml"

  | 3 ->
# 53 "lexer.mll"
    ( token lexbuf )
# 270 "lexer.ml"

  | 4 ->
# 54 "lexer.mll"
       ( LPAREN )
# 275 "lexer.ml"

  | 5 ->
# 55 "lexer.mll"
       ( RPAREN )
# 280 "lexer.ml"

  | 6 ->
# 56 "lexer.mll"
       ( LBRACE )
# 285 "lexer.ml"

  | 7 ->
# 57 "lexer.mll"
       ( RBRACE )
# 290 "lexer.ml"

  | 8 ->
# 58 "lexer.mll"
      ( SEMICOLON )
# 295 "lexer.ml"

  | 9 ->
# 59 "lexer.mll"
      ( COLON )
# 300 "lexer.ml"

  | 10 ->
# 60 "lexer.mll"
      ( COMMA )
# 305 "lexer.ml"

  | 11 ->
# 61 "lexer.mll"
      ( QMARK )
# 310 "lexer.ml"

  | 12 ->
# 62 "lexer.mll"
      ( BANG )
# 315 "lexer.ml"

  | 13 ->
# 64 "lexer.mll"
       ( EQ )
# 320 "lexer.ml"

  | 14 ->
# 66 "lexer.mll"
       ( BCEQ )
# 325 "lexer.ml"

  | 15 ->
# 67 "lexer.mll"
       ( BCGE )
# 330 "lexer.ml"

  | 16 ->
# 68 "lexer.mll"
       ( BCGT )
# 335 "lexer.ml"

  | 17 ->
# 69 "lexer.mll"
       ( BCLE )
# 340 "lexer.ml"

  | 18 ->
# 70 "lexer.mll"
       ( BCLT )
# 345 "lexer.ml"

  | 19 ->
# 71 "lexer.mll"
       ( BCNE )
# 350 "lexer.ml"

  | 20 ->
# 73 "lexer.mll"
       (BLAND)
# 355 "lexer.ml"

  | 21 ->
# 74 "lexer.mll"
       (BLOR)
# 360 "lexer.ml"

  | 22 ->
# 77 "lexer.mll"
      ( PLUS )
# 365 "lexer.ml"

  | 23 ->
# 78 "lexer.mll"
      ( MINUS )
# 370 "lexer.ml"

  | 24 ->
# 79 "lexer.mll"
      ( TIMES )
# 375 "lexer.ml"

  | 25 ->
# 80 "lexer.mll"
      ( DIV )
# 380 "lexer.ml"

  | 26 ->
# 82 "lexer.mll"
      ( MOD )
# 385 "lexer.ml"

  | 27 ->
# 85 "lexer.mll"
       ( PLUSF )
# 390 "lexer.ml"

  | 28 ->
# 86 "lexer.mll"
       ( MINUSF )
# 395 "lexer.ml"

  | 29 ->
# 87 "lexer.mll"
       ( TIMESF )
# 400 "lexer.ml"

  | 30 ->
# 88 "lexer.mll"
       ( DIVF )
# 405 "lexer.ml"

  | 31 ->
# 90 "lexer.mll"
               (EOF)
# 410 "lexer.ml"

  | 32 ->
let
# 91 "lexer.mll"
             l
# 416 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 91 "lexer.mll"
                  ( LITCONSTANT l )
# 420 "lexer.ml"

  | 33 ->
let
# 92 "lexer.mll"
                   f
# 426 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 92 "lexer.mll"
                     (FLOATCONSTANT(float_of_string f))
# 430 "lexer.ml"

  | 34 ->
let
# 93 "lexer.mll"
            i
# 436 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 93 "lexer.mll"
              ( INTCONSTANT (int_of_string i) )
# 440 "lexer.ml"

  | 35 ->
let
# 94 "lexer.mll"
        id
# 446 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 94 "lexer.mll"
           ( find_token id )
# 450 "lexer.ml"

  | 36 ->
# 95 "lexer.mll"
        (BOOLCONSTANT true)
# 455 "lexer.ml"

  | 37 ->
# 96 "lexer.mll"
         (BOOLCONSTANT false)
# 460 "lexer.ml"

  | 38 ->
let
# 97 "lexer.mll"
                    s
# 466 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 3) in
# 97 "lexer.mll"
                      (STRINGCONSTANT(s))
# 470 "lexer.ml"

  | 39 ->
# 100 "lexer.mll"
     (Printf.printf "ERROR: unrecogized symbol '%s'\n" (Lexing.lexeme lexbuf);
      raise Lexerror )
# 476 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and ruleTail acc lexbuf =
   __ocaml_lex_ruleTail_rec acc lexbuf 57
and __ocaml_lex_ruleTail_rec acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 105 "lexer.mll"
      ( acc )
# 488 "lexer.ml"

  | 1 ->
let
# 106 "lexer.mll"
        str
# 494 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 106 "lexer.mll"
            ( ruleTail (acc ^ str) lexbuf )
# 498 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_ruleTail_rec acc lexbuf __ocaml_lex_state

;;

