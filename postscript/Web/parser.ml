type token =
  | IDENTIFIER of (string)
  | LITCONSTANT of (string)
  | STRINGCONSTANT of (string)
  | FLOATCONSTANT of (float)
  | BOOLCONSTANT of (bool)
  | TP of (Lang.tp)
  | INTCONSTANT of (int)
  | BANG
  | NEG
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | PLUSF
  | MINUSF
  | TIMESF
  | DIVF
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | EQ
  | COMMA
  | SEMICOLON
  | COLON
  | QMARK
  | IF_KW
  | ELSE_KW
  | DO_KW
  | WHILE_KW
  | BREAK_KW
  | CONTINUE_KW
  | RETURN_KW
  | BCEQ
  | BCGE
  | BCGT
  | BCLE
  | BCLT
  | BCNE
  | BLAND
  | BLOR
  | EOF
  | FUNDECLDEF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Lang
# 52 "parser.ml"
let yytransl_const = [|
  264 (* BANG *);
  265 (* NEG *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIV *);
  270 (* MOD *);
  271 (* PLUSF *);
  272 (* MINUSF *);
  273 (* TIMESF *);
  274 (* DIVF *);
  275 (* LPAREN *);
  276 (* RPAREN *);
  277 (* LBRACE *);
  278 (* RBRACE *);
  279 (* EQ *);
  280 (* COMMA *);
  281 (* SEMICOLON *);
  282 (* COLON *);
  283 (* QMARK *);
  284 (* IF_KW *);
  285 (* ELSE_KW *);
  286 (* DO_KW *);
  287 (* WHILE_KW *);
  288 (* BREAK_KW *);
  289 (* CONTINUE_KW *);
  290 (* RETURN_KW *);
  291 (* BCEQ *);
  292 (* BCGE *);
  293 (* BCGT *);
  294 (* BCLE *);
  295 (* BCLT *);
  296 (* BCNE *);
  297 (* BLAND *);
  298 (* BLOR *);
    0 (* EOF *);
  299 (* FUNDECLDEF *);
    0|]

let yytransl_block = [|
  257 (* IDENTIFIER *);
  258 (* LITCONSTANT *);
  259 (* STRINGCONSTANT *);
  260 (* FLOATCONSTANT *);
  261 (* BOOLCONSTANT *);
  262 (* TP *);
  263 (* INTCONSTANT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\005\000\005\000\006\000\006\000\008\000\007\000\
\009\000\009\000\009\000\002\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\010\000\010\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\011\000\011\000\011\000\000\000"

let yylen = "\002\000\
\004\000\002\000\000\000\003\000\000\000\002\000\004\000\005\000\
\000\000\002\000\004\000\001\000\002\000\008\000\003\000\002\000\
\002\000\007\000\009\000\004\000\005\000\000\000\004\000\001\000\
\001\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\005\000\004\000\
\000\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\016\000\017\000\000\000\026\000\
\025\000\027\000\024\000\000\000\000\000\007\000\013\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
\000\000\000\000\000\000\000\000\028\000\000\000\000\000\033\000\
\035\000\037\000\000\000\000\000\034\000\036\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
\051\000\021\000\000\000\000\000\000\000\048\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\018\000\000\000\014\000\
\000\000\000\000\019\000\000\000\023\000"

let yydgoto = "\002\000\
\004\000\025\000\026\000\050\000\005\000\006\000\015\000\008\000\
\030\000\120\000\051\000"

let yysindex = "\007\000\
\009\255\000\000\020\255\000\000\236\254\024\000\241\254\009\255\
\011\255\009\255\000\000\044\255\009\255\000\000\035\255\051\255\
\058\000\010\255\040\255\039\255\043\255\045\255\046\255\021\000\
\047\255\044\255\000\000\048\255\067\255\059\255\000\000\021\000\
\021\000\021\000\044\255\021\000\000\000\000\000\063\255\000\000\
\000\000\000\000\000\000\021\000\120\255\000\000\000\000\066\255\
\000\000\153\255\086\255\186\255\219\255\065\255\252\255\021\000\
\035\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\000\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\051\255\021\000\083\255\000\000\
\094\255\085\255\096\255\098\255\000\000\014\255\014\255\000\000\
\000\000\000\000\014\255\014\255\000\000\000\000\068\000\083\001\
\225\001\225\001\225\001\225\001\083\001\052\001\043\001\000\000\
\000\000\000\000\044\255\100\255\044\255\000\000\021\000\099\255\
\021\000\117\255\134\000\091\255\101\000\000\000\119\255\000\000\
\116\255\044\255\000\000\121\255\000\000"

let yyrindex = "\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\142\000\
\000\000\142\000\000\000\000\000\101\255\000\000\000\000\126\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\127\255\000\000\000\000\000\000\000\000\000\000\059\255\
\000\000\000\000\000\000\000\000\000\000\000\000\087\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\255\
\000\000\130\255\000\000\000\000\000\000\000\000\000\000\059\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\126\255\059\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\167\000\200\000\000\000\
\000\000\000\000\233\000\010\001\000\000\000\000\000\000\180\001\
\088\001\111\001\134\001\157\001\192\001\068\255\249\254\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\255\033\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\230\255\000\000\234\255\138\000\253\255\003\000\000\000\
\075\000\000\000\203\255"

let yytablesize = 755
let yytable = "\047\000\
\005\000\045\000\084\000\007\000\014\000\012\000\017\000\001\000\
\054\000\013\000\052\000\053\000\045\000\055\000\003\000\028\000\
\045\000\045\000\045\000\045\000\009\000\057\000\010\000\011\000\
\105\000\060\000\061\000\062\000\032\000\016\000\065\000\066\000\
\033\000\022\000\045\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\018\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\022\000\012\000\
\029\000\031\000\034\000\035\000\022\000\036\000\022\000\022\000\
\022\000\022\000\022\000\048\000\046\000\037\000\038\000\019\000\
\013\000\020\000\021\000\022\000\023\000\024\000\049\000\047\000\
\112\000\056\000\114\000\047\000\047\000\047\000\082\000\044\000\
\115\000\077\000\117\000\044\000\044\000\044\000\044\000\124\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\079\000\046\000\106\000\044\000\044\000\046\000\046\000\
\046\000\046\000\107\000\108\000\109\000\110\000\113\000\119\000\
\116\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\118\000\122\000\123\000\005\000\125\000\003\000\
\067\000\009\000\068\000\010\000\012\000\050\000\027\000\104\000\
\000\000\000\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\000\000\000\000\000\000\000\000\000\000\
\078\000\000\000\000\000\068\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\000\000\000\000\000\000\000\000\
\000\000\000\000\080\000\000\000\068\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\000\000\081\000\000\000\
\000\000\000\000\000\000\000\000\000\000\068\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\000\000\083\000\
\000\000\000\000\000\000\000\000\000\000\039\000\068\000\040\000\
\041\000\042\000\000\000\043\000\000\000\000\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\000\000\044\000\
\000\000\000\000\000\000\003\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\000\000\085\000\000\000\
\000\000\000\000\000\000\000\000\000\000\068\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\111\000\068\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\000\000\
\121\000\000\000\000\000\000\000\000\000\000\000\000\000\068\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\029\000\029\000\000\000\000\000\000\000\029\000\029\000\000\000\
\000\000\000\000\029\000\000\000\000\000\000\000\029\000\029\000\
\029\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\031\000\031\000\000\000\000\000\000\000\031\000\031\000\
\000\000\000\000\000\000\031\000\000\000\000\000\000\000\031\000\
\031\000\031\000\031\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\030\000\030\000\000\000\000\000\000\000\030\000\
\030\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\
\030\000\030\000\030\000\030\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\032\000\032\000\000\000\000\000\000\000\
\032\000\032\000\000\000\000\000\000\000\032\000\000\000\000\000\
\000\000\032\000\032\000\032\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\000\000\000\000\069\000\070\000\
\071\000\072\000\073\000\074\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\000\000\000\000\000\000\042\000\
\042\000\042\000\042\000\000\000\000\000\000\000\070\000\071\000\
\072\000\073\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\041\000\000\000\000\000\000\000\041\000\041\000\
\041\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\040\000\000\000\000\000\000\000\040\000\040\000\040\000\
\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\039\000\000\000\000\000\000\000\039\000\039\000\039\000\039\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\038\000\
\000\000\000\000\000\000\038\000\038\000\038\000\038\000\000\000\
\000\000\000\000\000\000\043\000\000\000\000\000\038\000\043\000\
\043\000\043\000\043\000\038\000\038\000\038\000\000\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\000\000\043\000\
\043\000\043\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000"

let yycheck = "\026\000\
\000\000\024\000\056\000\001\000\008\000\021\001\010\000\001\000\
\035\000\025\001\033\000\034\000\020\001\036\000\006\001\013\000\
\024\001\025\001\026\001\027\001\001\001\044\000\043\001\000\000\
\078\000\012\001\013\001\014\001\019\001\019\001\017\001\018\001\
\023\001\001\001\042\001\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\001\001\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\022\001\021\001\
\006\001\000\000\019\001\021\001\028\001\019\001\030\001\031\001\
\032\001\033\001\034\001\001\001\022\001\025\001\025\001\028\001\
\025\001\030\001\031\001\032\001\033\001\034\001\020\001\020\001\
\107\000\019\001\109\000\024\001\025\001\026\001\022\001\020\001\
\111\000\024\001\113\000\024\001\025\001\026\001\027\001\122\000\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\020\001\020\001\025\001\041\001\042\001\024\001\025\001\
\026\001\027\001\021\001\031\001\021\001\020\001\019\001\029\001\
\022\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\022\001\021\001\025\001\000\000\022\001\043\001\
\025\001\020\001\027\001\020\001\022\001\020\001\013\000\077\000\
\255\255\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\255\255\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\025\001\255\255\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\255\255\255\255\255\255\255\255\255\255\001\001\027\001\003\001\
\004\001\005\001\255\255\007\001\255\255\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\255\255\019\001\
\255\255\255\255\255\255\043\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\010\001\011\001\255\255\255\255\255\255\015\001\016\001\255\255\
\255\255\255\255\020\001\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\010\001\011\001\255\255\255\255\255\255\015\001\016\001\
\255\255\255\255\255\255\020\001\255\255\255\255\255\255\024\001\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\010\001\011\001\255\255\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\020\001\255\255\255\255\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\010\001\011\001\255\255\255\255\255\255\
\015\001\016\001\255\255\255\255\255\255\020\001\255\255\255\255\
\255\255\024\001\025\001\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\255\255\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\020\001\255\255\255\255\255\255\024\001\
\025\001\026\001\027\001\255\255\255\255\255\255\036\001\037\001\
\038\001\039\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\020\001\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\020\001\255\255\255\255\255\255\024\001\025\001\026\001\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\020\001\255\255\255\255\255\255\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\020\001\
\255\255\255\255\255\255\024\001\025\001\026\001\027\001\255\255\
\255\255\255\255\255\255\020\001\255\255\255\255\035\001\024\001\
\025\001\026\001\027\001\040\001\041\001\042\001\255\255\255\255\
\255\255\255\255\035\001\255\255\255\255\255\255\255\255\040\001\
\041\001\042\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001"

let yynames_const = "\
  BANG\000\
  NEG\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  MOD\000\
  PLUSF\000\
  MINUSF\000\
  TIMESF\000\
  DIVF\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  EQ\000\
  COMMA\000\
  SEMICOLON\000\
  COLON\000\
  QMARK\000\
  IF_KW\000\
  ELSE_KW\000\
  DO_KW\000\
  WHILE_KW\000\
  BREAK_KW\000\
  CONTINUE_KW\000\
  RETURN_KW\000\
  BCEQ\000\
  BCGE\000\
  BCGT\000\
  BCLE\000\
  BCLT\000\
  BCNE\000\
  BLAND\000\
  BLOR\000\
  EOF\000\
  FUNDECLDEF\000\
  "

let yynames_block = "\
  IDENTIFIER\000\
  LITCONSTANT\000\
  STRINGCONSTANT\000\
  FLOATCONSTANT\000\
  BOOLCONSTANT\000\
  TP\000\
  INTCONSTANT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'fundecl_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fundefn_list) in
    Obj.repr(
# 47 "parser.mly"
                                                 ( Prog(_1,_3))
# 436 "parser.ml"
               : Lang.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fundefn_list) in
    Obj.repr(
# 48 "parser.mly"
                  ( Prog([],_1))
# 443 "parser.ml"
               : Lang.prog))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
              ([])
# 449 "parser.ml"
               : 'fundecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fundecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fundecl_list) in
    Obj.repr(
# 52 "parser.mly"
                                    (_1:: _3)
# 457 "parser.ml"
               : 'fundecl_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
              ([])
# 463 "parser.ml"
               : 'fundefn_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fundefn) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fundefn_list) in
    Obj.repr(
# 57 "parser.mly"
                        (_1 :: _2)
# 471 "parser.ml"
               : 'fundefn_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'fundecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Lang.com) in
    Obj.repr(
# 61 "parser.mly"
  ( Fundefn(_1, _3) )
# 479 "parser.ml"
               : 'fundefn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Lang.tp) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'vardecl_comma_list_opt) in
    Obj.repr(
# 65 "parser.mly"
  ( Fundecl(_1, _2, _4) )
# 488 "parser.ml"
               : 'fundecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
   ( [] )
# 494 "parser.ml"
               : 'vardecl_comma_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Lang.tp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
                 ([Vardecl(_1,_2)])
# 502 "parser.ml"
               : 'vardecl_comma_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Lang.tp) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'vardecl_comma_list_opt) in
    Obj.repr(
# 74 "parser.mly"
 (Vardecl(_1,_2)::_4)
# 511 "parser.ml"
               : 'vardecl_comma_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Lang.com) in
    Obj.repr(
# 78 "parser.mly"
             (_1)
# 518 "parser.ml"
               : Lang.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Lang.com) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Lang.com) in
    Obj.repr(
# 79 "parser.mly"
                                  (Seq(_1,_2))
# 526 "parser.ml"
               : Lang.com))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Lang.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Lang.com) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'if_fstat) in
    Obj.repr(
# 84 "parser.mly"
   (CondC(_3,_6, _8))
# 535 "parser.ml"
               : Lang.com))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Lang.expr) in
    Obj.repr(
# 85 "parser.mly"
                           (Return(_2))
# 542 "parser.ml"
               : Lang.com))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                     (Exit)
# 548 "parser.ml"
               : Lang.com))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                        (Skip)
# 554 "parser.ml"
               : Lang.com))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Lang.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Lang.com) in
    Obj.repr(
# 89 "parser.mly"
    (Loop(Seq(CondC(_3, Skip, Exit),_6)))
# 562 "parser.ml"
               : Lang.com))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Lang.com) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    Obj.repr(
# 92 "parser.mly"
    ( Loop(Seq(_3, CondC(_7, Skip, Exit))))
# 570 "parser.ml"
               : Lang.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Lang.expr) in
    Obj.repr(
# 93 "parser.mly"
                               (Assign(_1,_3))
# 578 "parser.ml"
               : Lang.com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'args) in
    Obj.repr(
# 94 "parser.mly"
                                           (CallC(_1,_3))
# 586 "parser.ml"
               : Lang.com))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
    ( Skip )
# 592 "parser.ml"
               : 'if_fstat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Lang.com) in
    Obj.repr(
# 98 "parser.mly"
                                              (_3 )
# 599 "parser.ml"
               : 'if_fstat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 101 "parser.mly"
    ( Const (IntV _1) )
# 606 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 102 "parser.mly"
                   ( Const (FloatV _1) )
# 613 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 103 "parser.mly"
                  ( Const (StringV _1) )
# 620 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 104 "parser.mly"
                ( Const (BoolV _1) )
# 627 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Lang.expr) in
    Obj.repr(
# 107 "parser.mly"
    ( _2 )
# 634 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 108 "parser.mly"
                   ( BinOp(BArith( BAadd ),_1,_3))
# 642 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 109 "parser.mly"
                   ( BinOp(BArith(BAfadd),_1,_3) )
# 650 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 110 "parser.mly"
                  ( BinOp(BArith(BAsub),_1,_3)  )
# 658 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 111 "parser.mly"
                  ( BinOp(BArith(BAfsub),_1,_3)  )
# 666 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 112 "parser.mly"
                   ( BinOp(BArith( BAmul),_1,_3)  )
# 674 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 113 "parser.mly"
                   ( BinOp(BArith(BAfmul),_1,_3)  )
# 682 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 114 "parser.mly"
                   ( BinOp(BArith(BAdiv),_1,_3)  )
# 690 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 115 "parser.mly"
                   ( BinOp(BArith(BAfdiv),_1,_3)  )
# 698 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 116 "parser.mly"
                   ( BinOp(BArith(BAmod),_1,_3)  )
# 706 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 117 "parser.mly"
                 ( BinOp(BCompar(BCeq),_1,_3) )
# 714 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 118 "parser.mly"
                 ( BinOp(BCompar(BClt ),_1,_3) )
# 722 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 119 "parser.mly"
                 ( BinOp(BCompar(BCle ),_1,_3) )
# 730 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 120 "parser.mly"
                 ( BinOp(BCompar(BCgt ),_1,_3) )
# 738 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 121 "parser.mly"
                 ( BinOp(BCompar(BCge ),_1,_3) )
# 746 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 122 "parser.mly"
                 ( BinOp(BCompar(BCne),_1,_3) )
# 754 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 123 "parser.mly"
                  ( BinOp(BBool(BBand),_1,_3) )
# 762 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 124 "parser.mly"
                 (BinOp(BBool(BBor),_1,_3) )
# 770 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 126 "parser.mly"
    ( VarE(_1))
# 777 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 128 "parser.mly"
    ( CondE (_1, _3, _5) )
# 786 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 130 "parser.mly"
    ( CallE(_1, _3) )
# 794 "parser.ml"
               : Lang.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
    ( [] )
# 800 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Lang.expr) in
    Obj.repr(
# 134 "parser.mly"
        ( [_1] )
# 807 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Lang.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 136 "parser.mly"
    ( _1 :: _3 )
# 815 "parser.ml"
               : 'args))
(* Entry start *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let start (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lang.prog)
